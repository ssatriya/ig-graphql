scalar DateTime

type User {
  id: ID!
  name: String!
  username: String!
  email: String
  image: String
  bio: String
  isOauth: Boolean
  post: [Post]
  followers: [Follower]
  followings: [Follower]
  postCount: Int
  followingCount: Int
  followersCount: Int
}

type Post {
  id: ID!
  userId: ID!
  caption: String
  images: String!
  aspectRatio: String!
  createdAt: DateTime!
  user: User
  comment: [Comment]
  like: [Like]
  commentCount: Int
  likeCount: Int
  lastLike: String
}

type PageInfo {
  hasNextPage: Boolean!
  currentPage: Int!
  pageSize: Int!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [Post]
}

type Follower {
  id: ID!
  followersId: ID!
  followingsId: ID!
  user: User
}

type Comment {
  id: ID!
  comment: String!
  userId: ID!
  postId: ID!
  user: User
  post: Post
  createdAt: DateTime!
}

type Like {
  id: ID!
  userId: ID!
  postId: ID!
  user: User
  post: Post
  createdAt: DateTime!
}

type Query {
  users: [User]!
  posts(limit: Int!, page: Int!): PostConnection!
  postsByUserId(id: ID!): [Post]!
  userById(id: ID!): User
  userByUsername(username: String!): User
  post(id: ID!): Post
  comments(id: ID!): [Comment]!
  likes: [Like]!
  like(postId: String!): [Like]!
  following: [Follower]!
}

type Mutation {
  createPost(post: CreatePostInput!): Response!
  createLike(postId: String!): [Like]!
  createComment(comment: CreateCommentInput!): Response!
  followUser(userId: String!): Response!
}

input CreatePostInput {
  caption: String
  images: String!
  aspectRatio: String!
}

input CreateCommentInput {
  comment: String!
  postId: String!
}

type Response {
  message: String!
  status: Int!
}
